<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Bruno Anjos</title>
    <link>https://bruno-anjos.github.io/posts/</link>
    <description>Recent content in Posts on Bruno Anjos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://bruno-anjos.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSAW 2020 - modus_operandi</title>
      <link>https://bruno-anjos.github.io/posts/modus_operandi/</link>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bruno-anjos.github.io/posts/modus_operandi/</guid>
      <description>This is a crypto challenge from the CSAW 2020 CTF originally worth 150 points.
The challenge initially tells us to connect as such:
$ nc crypto.chal.csaw.io 5001 Hello! For each plaintext you enter, find out if the block cipher used is ECB or CBC. Enter &amp;#34;ECB&amp;#34; or &amp;#34;CBC&amp;#34; to get the flag! We need to tell if the cipher being used to encode our plaintext is ECB or CBC. The big difference is that ECB, which stands for Electronic Code Book, always produces the same ciphertext for a given block.</description>
    </item>
    
    <item>
      <title>CSAW 2020 - perfect_secrecy</title>
      <link>https://bruno-anjos.github.io/posts/perfect_secrecy/</link>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bruno-anjos.github.io/posts/perfect_secrecy/</guid>
      <description>The challenge goes as follows:
 Alice sent over a couple of images with sensitive information to Bob, encrypted with a pre-shared key. It is the most secure encryption scheme, theoretically&amp;hellip;
 These are the two images we have access to:
    One of the most secure encryption techniques that is theoretically uncrackable is One Time Pad. This technique relies completely on a single use per key rule.</description>
    </item>
    
    <item>
      <title>UTCTF - Random ECB</title>
      <link>https://bruno-anjos.github.io/posts/utctf_random_ecb/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bruno-anjos.github.io/posts/utctf_random_ecb/</guid>
      <description>Introduction First and foremost there is a very good explanation how AES ECB can be exploited through a chosen plaintext attack here. The problem can be visualized in these two pictures:
    As you can see even though the image was encrypted, Tux (the penguin) is still sort of visible in the result. This is due to the fact that AES ECB works in a standard codebook fashion, where each input has a ciphertext associated.</description>
    </item>
    
    <item>
      <title>rugenere - Vigenère Cipher tool written in Rust</title>
      <link>https://bruno-anjos.github.io/posts/rugenere/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bruno-anjos.github.io/posts/rugenere/</guid>
      <description>I had extra time, and really wanted to get into rust development, so i challenged myself to start a new project. One of my friends was in the exact same position and decided to do a simple Caesar&amp;rsquo;s cipher tool. He suggested that i do one for the Vigenère cipher since both of these ciphers are used in Over The Wire challenges. In fact Krypton has challenges that use both of these ciphers, you can check my walkthrough of Krypton here.</description>
    </item>
    
    <item>
      <title>Over The Wire - Krypton Walkthrough</title>
      <link>https://bruno-anjos.github.io/posts/krypton/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bruno-anjos.github.io/posts/krypton/</guid>
      <description>Introduction Over The Wire provides multiple challenges focused on different topics of computer systems. The one which we will solve here is Krypton. This is challenge is focused on cryptography.
You can read more about the challenge and how it works here.
Levels:
 Level 0 Level 1 Level 2 Level 3 Level 4 Level 5 Level 6  Level 0 The password is a base64 encoded string. We can use the base64 command.</description>
    </item>
    
    <item>
      <title>Over The Wire - Bandit Walkthrough</title>
      <link>https://bruno-anjos.github.io/posts/bandit/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bruno-anjos.github.io/posts/bandit/</guid>
      <description>Introduction Over The Wire provides multiple challenges focused on different topics of computer systems. The one which we will solve here is Bandit. This is focused on SSH communication, bash commands and some basic UNIX concepts.
To connect to any of these levels you need 2 things: a username, and a password. Each level has a username in the format bandit&amp;lt;level_number&amp;gt; (without the &amp;lsquo;&amp;lt;&amp;rsquo; &amp;lsquo;&amp;gt;&amp;rsquo;) so for level 0 the username would be bandit0.</description>
    </item>
    
  </channel>
</rss>